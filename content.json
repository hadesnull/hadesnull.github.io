[{"title":"Android集成芝麻信用API获得芝麻信用分","date":"2017-08-20T16:00:00.000Z","path":"2017/08/21/Android接芝麻信用分/","text":"芝麻信用，是蚂蚁金服旗下独立的第三方征信机构，通过云计算、机器学习等技术客观呈现个人的信用状况，已经在信用卡、消费金融、融资租赁、酒店、租房、出行、婚恋、分类信息、学生服务、公共事业服务等上百个场景为用户、商户提供信用服务。 &gt;客户端集成SDK获取芝麻分其实很简单，流程大致是前端输入用户的有效姓名和身份证，服务器端把用户名和身份证结合密钥生成客户端需要的appId, params, sign。并且下发这几个参数给客户端，客户端通过这几个参数使用CreditApp类中的authenticate()方法去以web的方式认证，认证过程会收到之前在支付宝绑定的手机的验证码，输入之后就能认证成功，并且客户端会有回调，得到成功回调之后服务端就能查到用户的芝麻分了&gt; 1.注册需要去官方网站注册登录（芝麻信用商家服务平台），注册自己的App，自己的服务端需要相关app的公钥和私钥 2.客户端SDK下载之前没有在官方网站找到相关的SDK文件和下载，之后在一篇博客中找到直接链接过去下载sdk,相关的文档和对应的IOS sdk也在一起 3.客户端集成环境导入相关jar包 4.获取认证,查询分数有了SDK和集成文档，客户端的工作就很简单了，这里就不赘述了,关键方法记录下 Map&lt;String, String&gt; extParams = new HashMap&lt;&gt;(); extParams.put(&quot;token&quot;, LoginMgr.getInstance().getVerifyuserToken()); creditApp.authenticate(getActivity(), appId, null, params, sign, extParams, new ICreditListener() { @Override public void onComplete(Bundle bundle) { if (bundle != null) { getScroe(bundle); } } @Override public void onError(Bundle bundle) { showToast(&quot;认证失败&quot;); } @Override public void onCancel() { } }); token可以不需要，根据自己的需要增减，getScroe(bundle);把相关参数传递给后台，后台会根据私钥解密得到openId，这个参数服务端就能通过芝麻的java相关SDK获得芝麻分。","tags":[]},{"title":"android 弹簧效果 rebound","date":"2017-03-23T08:15:00.000Z","path":"2017/03/23/android-弹簧效果-rebound/","text":"Android的动画效果 工作原理工作原理其实就是一个值到另一个值像弹簧一样变化，正常会使用0-1这个值来做弹性变化，得到的值并不只是从0到1，而是会大于1，在1的左右有些波动值，最后趋于1 效果图 代码代码很简单，初始化弹簧动画，在ontouch中触发动画，得到的值在onSpringUpdate()中处理 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mball = findViewById(R.id.tv); WindowManager systemService = (WindowManager) getSystemService(Context.WINDOW_SERVICE); width = systemService.getDefaultDisplay().getWidth(); height = systemService.getDefaultDisplay().getHeight(); //创建系统用于循环执行控件弹簧效果 SpringSystem mSpringSystem = SpringSystem.create(); //给系统添加一个弹簧 mSpring = mSpringSystem.createSpring(); int tension = 40; //张力系数 int friction = 3; //阻力系数 //根据张力系数和阻力系数创建一组弹簧参数 SpringConfig config = new SpringConfig(tension, friction); //配置 mSpring.setSpringConfig(config); //添加监听器，监听弹簧的形变 mSpring.addListener(new SimpleSpringListener() { @RequiresApi(api = Build.VERSION_CODES.HONEYCOMB) @Override public void onSpringUpdate(Spring spring) { float value = (float) spring.getCurrentValue(); mball.setX(width/2 + (point.x- width/2) * (1-value)); mball.setY(height/2 + (point.y - height/2) * (1-value)); Log.i(&quot;SpringSystem&quot;, value+&quot;&quot;); } }); } @RequiresApi(api = Build.VERSION_CODES.HONEYCOMB) @Override public boolean onTouchEvent(MotionEvent event) { switch (event.getAction()) { case MotionEvent.ACTION_DOWN: mball.setX(event.getRawX()- mball.getWidth()/2); mball.setY(event.getRawY()- mball.getHeight()/2); break; case MotionEvent.ACTION_MOVE: mball.setX(event.getRawX()- mball.getWidth()/2); mball.setY(event.getRawY()- mball.getHeight()/2); //mSpring.setEndValue(0); break; case MotionEvent.ACTION_UP: mSpring.setCurrentValue(0); point.set((int) event.getRawX() - mball.getWidth()/2, (int) event.getRawY()- mball.getHeight()/2); mSpring.setEndValue(1); break; default: break; } return super.onTouchEvent(event); } 其中触发动画的方法是mSpring.setEndValue(1);表示值从0到1 mSpring.setCurrentValue(0);//让值归零","tags":[]},{"title":"freeline","date":"2017-03-22T01:41:07.000Z","path":"2017/03/22/freeline/","text":"Freeline出于阿里的秒量级编译插件，同级于Android Studio的instant run目前为止还不太成熟，但用上速度还是嗖嗖的。 1.编译环境win + python2.7 + android studio 2.在Android studio上配置在工程的build.gradle里面添加classpath &apos;com.antfortune.freeline:gradle:0.8.6 在app的build.gradle里面添加插件和依赖apply plugin: &apos;com.antfortune.freeline&apos;//顶部 compile &apos;com.antfortune.freeline:runtime:0.6.0&apos; 添加完成之后同步下工程，在application的oncreate()中添加初始化 FreelineCore.init(this); 3.初始化freeeline到工程在Terminal或者工程文件根部的cmd中使用命令 gradlew initFreeline -Pmirror //参数(Pmirror)下载国内镜像会下载一会，出现BUILD SUCCESSFUL表示成功 4.编译编译运行到手机 python freeline.py 5.命令gradlew.bat initFreeline //初始化 python freeline.py //增量编译并部署至手机 python freeline.py -f //全量编译并部署至手机 借鉴前辈资源https://segmentfault.com/a/1190000007185691","tags":[]}]