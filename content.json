[{"title":"android 弹簧效果 rebound","date":"2017-03-23T08:15:00.000Z","path":"2017/03/23/android-弹簧效果-rebound/","text":"Android的动画效果 工作原理工作原理其实就是一个值到另一个值像弹簧一样变化，正常会使用0-1这个值来做弹性变化，得到的值并不只是从0到1，而是会大于1，在1的左右有些波动值，最后趋于1 效果图 代码代码很简单，初始化弹簧动画，在ontouch中触发动画，得到的值在onSpringUpdate()中处理 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mball = findViewById(R.id.tv); WindowManager systemService = (WindowManager) getSystemService(Context.WINDOW_SERVICE); width = systemService.getDefaultDisplay().getWidth(); height = systemService.getDefaultDisplay().getHeight(); //创建系统用于循环执行控件弹簧效果 SpringSystem mSpringSystem = SpringSystem.create(); //给系统添加一个弹簧 mSpring = mSpringSystem.createSpring(); int tension = 40; //张力系数 int friction = 3; //阻力系数 //根据张力系数和阻力系数创建一组弹簧参数 SpringConfig config = new SpringConfig(tension, friction); //配置 mSpring.setSpringConfig(config); //添加监听器，监听弹簧的形变 mSpring.addListener(new SimpleSpringListener() { @RequiresApi(api = Build.VERSION_CODES.HONEYCOMB) @Override public void onSpringUpdate(Spring spring) { float value = (float) spring.getCurrentValue(); mball.setX(width/2 + (point.x- width/2) * (1-value)); mball.setY(height/2 + (point.y - height/2) * (1-value)); Log.i(&quot;SpringSystem&quot;, value+&quot;&quot;); } }); } @RequiresApi(api = Build.VERSION_CODES.HONEYCOMB) @Override public boolean onTouchEvent(MotionEvent event) { switch (event.getAction()) { case MotionEvent.ACTION_DOWN: mball.setX(event.getRawX()- mball.getWidth()/2); mball.setY(event.getRawY()- mball.getHeight()/2); break; case MotionEvent.ACTION_MOVE: mball.setX(event.getRawX()- mball.getWidth()/2); mball.setY(event.getRawY()- mball.getHeight()/2); //mSpring.setEndValue(0); break; case MotionEvent.ACTION_UP: mSpring.setCurrentValue(0); point.set((int) event.getRawX() - mball.getWidth()/2, (int) event.getRawY()- mball.getHeight()/2); mSpring.setEndValue(1); break; default: break; } return super.onTouchEvent(event); } 其中触发动画的方法是mSpring.setEndValue(1);表示值从0到1 mSpring.setCurrentValue(0);//让值归零","tags":[]},{"title":"freeline","date":"2017-03-22T01:41:07.000Z","path":"2017/03/22/freeline/","text":"Freeline出于阿里的秒量级编译插件，同级于Android Studio的instant run目前为止还不太成熟，但用上速度还是嗖嗖的。 1.编译环境win + python2.7 + android studio 2.在Android studio上配置在工程的build.gradle里面添加classpath &apos;com.antfortune.freeline:gradle:0.8.6 在app的build.gradle里面添加插件和依赖apply plugin: &apos;com.antfortune.freeline&apos;//顶部 compile &apos;com.antfortune.freeline:runtime:0.6.0&apos; 添加完成之后同步下工程，在application的oncreate()中添加初始化 FreelineCore.init(this); 3.初始化freeeline到工程在Terminal或者工程文件根部的cmd中使用命令 gradlew initFreeline -Pmirror //参数(Pmirror)下载国内镜像会下载一会，出现BUILD SUCCESSFUL表示成功 4.编译编译运行到手机 python freeline.py 5.命令gradlew.bat initFreeline //初始化 python freeline.py //增量编译并部署至手机 python freeline.py -f //全量编译并部署至手机 借鉴前辈资源https://segmentfault.com/a/1190000007185691","tags":[]}]